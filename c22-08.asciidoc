= 学問への扉：計算機プログラミング入門

== Pyxelをつかったプログラミング

流れてくる障害物をジャンプでよけるゲームを作ってみる．
https://scratch.mit.edu/projects/41310490/[似たゲーム]

== ジャンプ

まず，主人公がジャンプする部分．

[source,python]
----
import pyxel
pyxel.init(256, 256)


class Player:
    def __init__(self):
        self.y = 150
        self.vy = 0

    def update(self):
        self.y = min(150, self.y + self.vy)
        self.vy = min(self.vy + 1, 8)
        if self.y == 150 and pyxel.btnp(pyxel.KEY_SPACE):
            self.vy = -5

    def draw(self):
        pyxel.rectb(200, self.y, 16, 16, 15)

player = Player()


def update():
    player.update()


def draw():
    pyxel.cls(0)
    player.draw()

pyxel.run(update, draw)
----

==== 練習

もう少し高く飛ぶようにしよう．

== 状態の導入

ゲーム全体．


[source,python]
----
import pyxel
pyxel.init(256, 256)


class Player:
    def __init__(self):
        self.y = 150
        self.vy = 0

    def update(self):
        self.y = min(150, self.y + self.vy)
        self.vy = self.vy + 1
        if self.y == 150 and pyxel.btnp(pyxel.KEY_SPACE):
            self.vy = -10

    def draw(self):
        pyxel.rectb(200, self.y, 16, 16, 15)


class Can:
    def __init__(self, x, vx):
        self.x = x
        self.vx = vx

    def update(self):
        self.x = self.x + self.vx
        if self.x > 256:
            self.x = -20

    def draw(self):
        pyxel.rectb(self.x, 150, 16, 16, 12)


class Block:
    def __init__(self, x, col):
        self.x = x
        self.col = col

    def update(self):
        self.x = self.x + 4
        if self.x >= 256:
            self.x = -64

    def draw(self):
        pyxel.rectb(self.x, 166, 64, 16, self.col)


player = Player()
cans = [Can(-100, 5), Can(-250, 8)]
state = "GAMEOVER"
life = 20
blocks = [Block(0, 1), Block(64, 2), Block(128, 1),
          Block(192, 2), Block(-64, 1)]


def update():
    global player, cans, state, life
    if state == "GAMEOVER":
        if pyxel.btnp(pyxel.KEY_SPACE):
            state = "PLAYING"
            life = 20
    else:
        player.update()
        for can in cans:
            can.update()
            if can.x - 10 < 200 < can.x + 10 and \
                    140 <= player.y <= 150:
                life = life - 1
                break
        if life == 0:
            state = "GAMEOVER"
        for block in blocks:
            block.update()


def draw():
    global player, cans, state, life
    pyxel.cls(0)
    player.draw()
    for can in cans:
        can.draw()
    pyxel.text(0, 0, str(life), 10)
    for block in blocks:
        block.draw()

pyxel.run(update, draw)
----

==== 練習

- 障害物（カンのつもり）を3個にしよう．


== 課題

キャラを表示したり音楽を足して上のプログラムを拡張しよう．
スコアやハイスコアも出したい．

キャラを表示するには，pyxelのサンプルプログラムのデータを使うと簡単．
（すでにキャラが描かれているので．）
cmd (Windows)やterminal (Mac)から `pyxel examples` を実行すると，
今のフォルダに新しく `pyxel_examples` というフォルダが作られて，そこに
サンプルプログラムが保存される．
これらのプログラムが使うキャラなどのデータは，さらに下のフォルダ `assets` の中に保存されている．

たとえば，プログラム `02_jump_game.py` が使っているデータは，ファイル
`jump_game.pyxres` に入っている．
このファイルをコピーして，自分のプログラムと同じフォルダに置こう．
プログラムの中から，以下のようにファイル名を指定してデータを取り込む．

[source,python]
----
pyxel.load("jump_game.pyxres")
----

編集する場合は，ターミナルから `pyxel edit jump_game.pyxres` として開く．
データのファイルの名前は，もちろん変えてもよい．

拡張の例

- スコアを表示（難度★）
- ハイスコアを表示（難度★）
- ゲームオーバーの表示を出したりして，ゲームっぽくしよう（難度★）
- 左右に動けるようにしよう（難度★★★）
- 障害物にあたったら音がでるようにしよう（難度★★）
- 正方形の代わりに自分のキャラを表示（難度★★）
- 正方形の代わりに障害物のキャラを表示（難度★★）
- 障害物にぶつかったら，しばらく無敵になるとか？（難度★★★★）
