= 学問への扉：計算機プログラミング入門

== 関数 (function) つづき
関数はプログラムの部品のこと．

=== 変数のスコープ (scope)

何が出力される？

////
.globallocal1.py
[source,python]
----
include::sources/globallocal1.py[lines=1..]
----
////

.globallocal1.py
[source,python]
----
def f(x):
    a = x

a = 10
print(a)
f(100)
print(a)
----

`x` は仮引数（かりひきすう, parameter），
`f(100)`　の中の `100` は実引数 (じつひきすう, argument)．
関数は，仮引数が実引数に置き換えられて，実行される．



関数の中でで初めて出てくる変数は，その関数だけで有効．同じ名前でも，区別される．
変数が有効な範囲をスコープとよぶ．

////
.globallocal2.py
[source,python]
----
include::sources/globallocal2.py[lines=1..]
----
////


.globallocal2.py
[source,python]
----
def f(x):
    global a
    a = x

a = 10
print(a)
f(100)
print(a)
----

関数の外で定義されている変数（グローバル変数）を関数内で使用する場合は，
`global` をつかって変数を指定．


== リスト (list)

データの列を保存するしくみ．
オフセット (offset)を指定して，要素にアクセスする．
（注．Python以外では，添え字(そえじ, index)と呼ぶことが多い．）


[source,python]
----
>>> weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
>>> weekdays[0]
'Monday'
>>> weekdays[4]
'Friday'
>>> weekdays[-1]
'Friday'
>>> weekdays[-5]
'Monday'
----
’append()' で追加．
'extend()' で，別のリストを追加．

[source,python]
----
>>> weekend = ['Saturday']
>>> weekend.append('Sunday')
>>> weekend
['Saturday', 'Sunday']
>>> weekdays.extend(weekend)
>>> weekdays
['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
----
その他，リスト途中への要素の追加や，削除など，いろいろな機能が存在．

`len` で，リストの長さを取得．
[source,python]
----
>>> len(weekdays)
7
----

リストのそれぞれの要素に対して，処理を実行．
[source,python]
----
>>> for day in weekdays:
	print(day)

Monday
Tuesday
Wednesday
Thursday
Friday
Saturday
Sunday
----

要素を入れ替えることも可能．
[source,python]
----
>>> weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
>>> weekdays[4] = "Fri"
>>> print(weekdays)
['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Fri', 'Saturday', 'Sunday']
----

== Hangman つづき
==== 前回のプログラムの原型全体

関数 `get_word()` の `WORD` は，単語のリストになっている．
(`split()` で，文字列を単語に分割して，リストにしている．)

////
.hangman.py
[source,python]
----
include::sources/hangman.py[lines=1..]
----
////

.hangman.py
[source,python]
----
# hangman
import random
def get_word():
    WORDS = "turaco shoebill tropicbird eagle crane peafowl dove \
            hummingbird puffin cassowary lorikeet flamingo penguin \
            heron booby owl toucan".split()
    offset = random.randint(0, len(WORDS)-1)
    return WORDS[offset]

def unmask_word(word, letters):
    st = ""
    for c in word:
        for l in letters:
            if c == l:
                st = st + c
                break
        else:
            st = st + "_"
    return st

def is_correct(secretword, letters):
    for c in secretword:
        for l in letters:
            if c == l:
                break
        else:
            return False
    return True

def input_letter():
    while True:
        print("英文字を1字入力")
        st = input()
        st = st.lower()
        if len(st) == 1:
            if st in 'abcdefghijklmnopqrstuvwxyz':
                break
    return st

life = 5 # <1>
inputLetters = ""
secret = get_word()
st = unmask_word(secret, inputLetters)
print("life:", life)
print(st)
while is_correct(secret, inputLetters) == False:
    inputLetters = inputLetters + input_letter()
    st_next = unmask_word(secret, inputLetters) # <2>
    print(st_next)
    if st == st_next: # <3>
        life = life - 1
        print("life:", life)
        if life <= 0:
             break # <4>
    st = st_next # <5>
----
<1> ライフを導入
<2> 1字入力する前の状況と，今の状況を区別するため`st_next` を導入
<3> 前の状況と変化がないなら，ライフを減らして表示する処理を実行
<4> ライフがないなら `break` して，`while` ループを抜ける
<5> 今から次の1字を入力するので，前の状況を，現在の状況とする

=== 課題
少し拡張したHangmanを完成させよう．
CLEから投稿．どう拡張したか，一言書くこと．

拡張の例

. 最後に正解を出力する
. 答となる単語を追加したり，変更したりする
. ライフの代わりに絵を出力

参考

.asciiart1.py
[source,python]
----
PIC0 = '''
　　　＿＿＿_∧∧　　／￣￣￣￣￣￣￣￣
　～'　＿＿__(,,ﾟДﾟ)＜　逝ってよし！
　　 ＵU 　 　Ｕ U　　　＼＿＿＿＿＿＿＿＿

'''
PIC1 = '''
　　　 ∧∧　　／￣￣￣￣￣
　　　(,,ﾟДﾟ)＜　ゴルァ！
　　 ⊂　　⊃　＼＿＿＿＿＿
　　～|　　|
　,,　　し`J
'''

PICS = [PIC0, PIC1]
print(PICS[0])
print(PICS[1])
----


==== Pyxel

次回以降，
https://github.com/kitao/pyxel/blob/master/README.ja.md[pyxel] をつかって，
プログラムを作っていく予定．
インストールしてみること．

インストールできたか確認のため，Pyxelのホームページのサンプルを少し動かしてみよう．
////
.pyxel_test.py
[source,python]
----
include::sources/pyxel_test.py[lines=1..]
----
////

.pyxel_test.py
[source,python]
----
import pyxel

pyxel.init(160, 120)

def update():
    if pyxel.btnp(pyxel.KEY_Q):
        pyxel.quit()

def draw():
    pyxel.cls(0)
    pyxel.rect(10, 10, 20, 20, 11)

pyxel.run(update, draw)
----

Qで終了．
