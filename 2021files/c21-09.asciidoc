= 学問への扉：計算機プログラミング入門

==  シューティングゲームをつくってみる

ボールのプログラムを拡張していく．

=== プログラムの分割

プログラムを分けて別のファイルにクラスや関数を書いて，同じフォルダにいれておけば，`import` でそれらを呼び出せる．

今回は，pyxeleditor は使わないで，プログラムの中でグラフィックスやサウンドを定義．
（キャラに凝らない場合におすすめ．）

////
.initialization.py
[source,python]
----
include::src21/shooting/initialization.py[lines=1..]
----
////

.initialization.py
[source,python]
----
import pyxel

def initialize():
    # グラフィックス
    # イメージバンク0に16x16のイメージを書き込む．座標0,0を左上とする．
    pyxel.image(0).set(
    0,
    0,
    [
    "0000cc8888cc0000",
    "0000cc8888cc0000",
    "0000cc777777cc00",
    "0000cc777777cc00",
    "0000cc77888877c0",
    "0000cc77888877c0",
    "cccc778833bb877c",
    "cccc778833bb077c",
    "7777778333387777",
    "7777778333387777",
    "778855cccc558877",
    "778855cccc558877",
    "8855cc7777cc5588",
    "8855cc7777cc5588",
    "00cc00888800cc00",
    "00cc00888800cc00"
     ])

    # サウンド
    pyxel.sound(0).set("a3a2c1a1", "p", "7", "s", 5)
    pyxel.sound(1).set("a3a2c2c2", "n", "7742", "s", 5)
----

////
.playerclass.py
[source,python]
----
include::src21/shooting/playerclass.py[lines=1..]
----
////

.playerclass.py
[source,python]
----
import pyxel

class Player:
    def __init__(self):
        self.x = 120
        self.y = 120

    def update(self):
        if pyxel.btn(pyxel.KEY_LEFT):
            self.x = max(self.x - 4, 0)
        if pyxel.btn(pyxel.KEY_RIGHT):
            self.x = min(self.x + 4, 240)
        if pyxel.btn(pyxel.KEY_UP):
            self.y = max(self.y - 4, 0)
        if pyxel.btn(pyxel.KEY_DOWN):
            self.y = min(self.y + 4, 240)

    def draw(self):
        pyxel.blt(self.x, self.y, 0, 0, 0, 16, 16, 0)
----

////
.ballclass.py
[source,python]
----
include::src21/shooting/ballclass.py[lines=1..]
----
////

.ballclass.py
[source,python]
----
import pyxel

class Ball:
    def __init__(self, x, y, dx, dy):
        self.x = x
        self.y = y
        self.dx = dx
        self.dy = dy

    def update(self):
        self.x = (self.x + self.dx) % 256
        self.y = (self.y + self.dy) % 256

    def draw(self):
        pyxel.circ(self.x + 8, self.y + 8, 8, 4)
----


////
.shooting1.py
[source,python]
----
include::src21/shooting/shooting1.py[lines=1..]
----
////


.shooting1.py
[source,python]
----
import pyxel
import random
import initialization
from ballclass import Ball
from playerclass import Player

pyxel.init(256, 256)
initialization.initialize()

counter = 0
player = Player()
balls = []
state = 'GAMEOVER'
hiscore = 0


def update():
    global state
    if state == 'GAMEOVER':
        if pyxel.btn(pyxel.KEY_SPACE):
            start_game()
            state = 'PLAYING'
    else:
        update_playing()


def start_game():
    global counter, balls, player
    counter = 0
    player.x = 120
    player.y = 220
    new_balls = []
    for i in range(8):
        newball = Ball(100, 0,
                       random.randint(-8, 8), random.randint(4, 8))
        new_balls.append(newball)
    balls = new_balls


def update_playing():
    global player, balls, counter, state, hiscore
    player.update()
    for b in balls:
        b.update()

    counter = counter + 1

    for b in balls:
        if b.x - 10 < player.x < b.x + 10 and \
                b.y - 10 < player.y < b.y + 10:
            pyxel.play(0, 0)
            state = 'GAMEOVER'
            hiscore = max(counter, hiscore)


def draw():
    global player, balls, counter, hiscore
    pyxel.cls(12)
    player.draw()
    for b in balls:
        b.draw()
    pyxel.text(5, 4, str(counter), 1)
    pyxel.text(220, 4, str(hiscore), 1)
    if state == 'GAMEOVER':
        pyxel.text(100, 100, 'Game Over', 8)

pyxel.run(update, draw)
----



=== ミサイル

ミサイルを打てるようにする．

まず，ミサイルのクラスを追加．

////
.missileclass.py
[source,python]
----
include::src21/shooting/missileclass.py[lines=1..]
----
////

.missileclass.py
[source,python]
----
import pyxel

class Missile:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.dead = False


    def update(self):
        self.y -= 16
        if self.y < 0:
            self.is_dead = True


    def draw(self):
        pyxel.rect(self.x, self.y, 2, 16, 8)
        pyxel.rect(self.x + 14, self.y, 2, 16, 8)
----


プログラムの本体で，ミサイルの動作を追加．

////

.shooting2.py
[source,python]
----
include::src21/shooting/shooting2.py[lines=1..]
----
////

.shooting2.py
[source,python]
----
import pyxel
import random
import initialization
from ballclass import Ball
from playerclass import Player
from missileclass import Missile

pyxel.init(256, 256)
initialization.initialize()

counter = 0
player = Player()
balls = []
state = 'GAMEOVER'
hiscore = 0
missiles = []


def update():
    global state
    if state == 'GAMEOVER':
        if pyxel.btn(pyxel.KEY_ENTER):
            start_game()
            state = 'PLAYING'
    else:
        update_playing()


def start_game():
    global counter, balls, player
    counter = 0
    player.x = 120
    player.y = 220
    new_balls = []
    for i in range(8):
        newball = Ball(100, 0,
                       random.randint(-8, 8), random.randint(4, 8))
        new_balls.append(newball)
    balls = new_balls


def update_playing():
    global player, balls, counter, state, hiscore, missiles
    player.update()

    for b in balls:
        b.update()

    counter = counter + 1

    for b in balls:
        if b.x - 10 < player.x < b.x + 10 and \
                b.y - 10 < player.y < b.y + 10:
            pyxel.play(0, 1)
            state = 'GAMEOVER'
            hiscore = max(counter, hiscore)

    if pyxel.btnp(pyxel.KEY_SPACE):
        missiles.append(Missile(player.x, player.y))
        pyxel.play(0, 0)
    new_missiles = []
    for m in missiles:
        m.update()
        if m.dead is False:
            new_missiles.append(m)
    missiles = new_missiles


def draw():
    global player, balls, counter, hiscore, missiles
    pyxel.cls(12)
    player.draw()
    for b in balls:
        b.draw()
    pyxel.text(5, 4, str(counter), 1)
    pyxel.text(220, 4, str(hiscore), 1)
    if state == 'GAMEOVER':
        pyxel.text(100, 100, 'Game Over', 8)
    for m in missiles:
        m.draw()

pyxel.run(update, draw)
----


== ミサイルと敵との当たり判定

ボールとミサイルが当たったら，どちも消えるように．
プログラム本体だけ修整．
このプログラムでは，ミサイルが当たった場合，以下の様に処理．

- ミサイルは実際に消滅 (リスト `missiles` から削除)

- ボールは，画面上部に瞬間的に移動


////

.shooting3.py
[source,python]
----
include::src21/shooting/shooting3.py[lines=1..]
----
////

.shooting3.py
[source,python]
----
import pyxel
import random
import initialization
from ballclass import Ball
from playerclass import Player
from missileclass import Missile

pyxel.init(256, 256)
initialization.initialize()

counter = 0
player = Player()
balls = []
state = 'GAMEOVER'
hiscore = 0
missiles = []


def update():
    global state
    if state == 'GAMEOVER':
        if pyxel.btn(pyxel.KEY_ENTER):
            start_game()
            state = 'PLAYING'
    else:
        update_playing()


def start_game():
    global counter, balls, player
    counter = 0
    player.x = 120
    player.y = 220
    new_balls = []
    for i in range(8):
        newball = Ball(100, 0,
                       random.randint(-8, 8), random.randint(4, 8))
        new_balls.append(newball)
    balls = new_balls


def update_playing():
    global player, balls, counter, state, hiscore, missiles
    player.update()

    for b in balls:
        b.update()

    counter = counter + 1

    for b in balls:
        if b.x - 10 < player.x < b.x + 10 and \
                b.y - 10 < player.y < b.y + 10:
            pyxel.play(0, 1)
            state = 'GAMEOVER'
            hiscore = max(counter, hiscore)

    if pyxel.btnp(pyxel.KEY_SPACE):
        missiles.append(Missile(player.x, player.y))
        pyxel.play(0, 0)
    for m in missiles:
        m.update()

    for b in balls:
        for m in missiles:
            if b.x - 10 < m.x < b.x + 10 and \
               b.y - 10 < m.y < b.y + 10:
                m.dead = True
                b.y = -10

    new_missiles = []
    for m in missiles:
        if m.dead is False:
            new_missiles.append(m)
    missiles = new_missiles


def draw():
    global player, balls, counter, hiscore, missiles
    pyxel.cls(12)
    player.draw()
    for b in balls:
        b.draw()
    pyxel.text(5, 4, str(counter), 1)
    pyxel.text(220, 4, str(hiscore), 1)
    if state == 'GAMEOVER':
        pyxel.text(100, 100, 'Game Over', 8)
    for m in missiles:
        m.draw()

pyxel.run(update, draw)
----


== 課題

作りたいゲームの案を考えよう．
基本的には，既存のプログラムを変更すればよい．
絵をつける，音をつける，とかでもOK．

pyxelオフィシャルのサンプルプログラムも是非参考に．


作りたいゲームがあるが，取っ掛かりがつかめない場合は，要相談．

CLEに１，２行でよいので，作りたいゲームの概要を記入．

== 来週以降

自分のゲームをつくっていく．
