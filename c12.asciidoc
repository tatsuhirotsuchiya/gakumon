= 学問への扉：計算機プログラミング入門

== Pyxelをつかったプログラミング
== 課題

自分のプログラムをつくる．「ゲームでなくてもよいが，pyxelは使うこと」
----->としていましたが，あくまで「原則」とします．

のこり 7/8と7/22でプログラム作成．
8/5に5分程度で，パワーポイントをつかってプレゼンする．
そのためのパワーポイント資料作成は，7/22から8/5までに実施．

7/29は自主活動（普段作業している基礎工の部屋は使用不可能）．
したがって，自分のPCを使っていないのなら，プログラム制作は7/22までに終わらせておく．

作成した発表用の資料（パワーポイントなどのファイル）は，
8/5正午までにCLEにアップロードすること．

当日アップロードしたファイルをダウンロードして，PCにいれておきますので，
それを使ってプレゼンしてください．
時間は，1人5分程度（質問があれば1分程度）．


== 画像のさしかえ

画像をさしかえる方法について解説する．

例として，clickgameを変更して，一部円を画像にしてみる．

image::images/clickgame.png[画面,400]


方針は，円の直径が8以下なら，用意した絵に差し替えるものとする．
直径1, 2, 3, ..., 8の場合のために，画像を用意する．

方法はpyxeleditorをたちあげて，絵を編集する．
具体的には，

.  作業しているフォルダーを表すウィンドウの上の方に，フォルダの階層構造が表示されている窓があるので，そこに`powershell` と入力する．

. すると，窓が立ち上がるので，そこで`pyxeleditor` と入力すればよい．

. 保存すると `my_resource.pyxel` というファイルが作成される．
ここに画像や音楽の情報が保存される．

で，画像のエディタをつかって円の代わりの画像をかく．
256ピクセルX256ピクセルの領域(イメージバンクとよんでいる）が三つ（0, 1, 2番)
つかえるが，ここでは0番に描いている．

* 座標(0,0)と(7,7)の点を対角頂点とする領域に，半径1用の絵をかいている．
* 座標(0,8)と(7,15)の点を対角頂点とする領域に，半径2用の絵をかいている．
* 座標(0,16)と(7,23)の点を対角頂点とする領域に，半径3用の絵をかいている．
* 半径8までつづきます．

image::images/pyxeleditor1.png[pyxeleditor,400]

絵のデータを保存したら，プログラムを変更していきます．

. データの読み込み

. 半径が小さいとき，円を描く処理を画像を描く処理に変更

が必要．

==== 1) データの読み込み
１は以下の通り．初期化のところで実行．
----
class App:
    def __init__(self):
        pyxel.init(SCREEN_WIDTH, SCREEN_HEIGHT, caption="Pyxel Bubbles")
        pyxel.mouse(True)
        pyxel.load("my_resource.pyxel")  #<1>
----

==== 2) 半径が小さいとき，円を描く処理を画像を描く処理に変更

----
for bubble in self.bubbles:
		if bubble.r > 8:  # <1>
				pyxel.circ(bubble.pos.x, bubble.pos.y, bubble.r, bubble.color)
		else:
				pyxel.blt(bubble.pos.x-4, bubble.pos.y-4, 0,
									0, (int(bubble.r)-1)*8, 8, 8, 0)  # <2>
----

半径が8より大きければ，以前の処理のまま．（円を表示）

小さい場合，円ではなく用意した画像を表示する．

``pyxel.blt(bubble.pos.x-4, bubble.pos.y-4, 0, 0, (int(bubble.r)-1)*8, 8, 8, 0)``

`pyxel.blt()` が画像を表示する関数．
引数(ひきすう)の意味は，順番に以下のとおり．

* 画面上で画像を表示する左上の座標は`(bubble.pos.x-4, bubble.pos.y-4)`．
つまり，円の中心より左上に4ピクセル動かす．

* 画像をとってくる先は `0` 番目のイメージバンク．

* 画像のイメージバンク上の左上の座標は，`(0, (int(bubble.r)-1)*8)`　
`bubble.r` は半径だが，整数ではないので，`int()` をつかって整数にしている．

* 取ってくる領域のおおきさは `8` × `8` ピクセル．

* 色0 (黒のこと)は，透けるようにしている（透明色）

できあがったものは以下のとおり

* link:tmp\06_click_game.py[プログラム]

* link:tmp\my_resource.pyxel[画像等のデータ]

== pyxelエディタをつかわないで，画像を描く方法

数字でピクセルの色を直接指定する．0～9, a, b, c, d, e, fで16色を表す．

.plane.py
[source,python]
----
import pyxel

pyxel.init(100, 100)

# 8x8のドット絵を描く
# 0からfまでで15色を指定
plane_dot = ["0006d000",
             "0006d000",
             "00688660",
             "065586d0",
             "d6c656dd",
             "d6c65ddd",
             "02665d20"]

# 上で記述した画像を，イメージバンクにコピー
# ここでは，画像の左上を，イメージバンクの座標(0,0)にあわせている
pyxel.image(0).set(0, 0, plane_dot)

# 飛行機のx座標
plane_x = 50


def update():
    global plane_x
    if pyxel.btnp(pyxel.KEY_Q):
        pyxel.quit()
    if pyxel.btn(pyxel.KEY_LEFT):
        plane_x = max(plane_x - 4, 0)
    elif pyxel.btn(pyxel.KEY_RIGHT):
        plane_x = min(plane_x + 4, 92)


def draw():
    global plane_x
    pyxel.cls(1)
    # 飛行機を描写
    pyxel.blt(plane_x, 85, 0, 0, 0, 8, 8, 0)

pyxel.run(update, draw)
----

image::images/plane.png[画面,400]

== プレゼン資料作成にむけて

* サイバーメディアセンターでPowerpointをつかうのなら，スクリーンショットを自分宛にメールで送っておくとよい．

* いまいるところ（基礎工G棟の実験室）でプレゼン資料をつくるのなら，たとえば，google slidesどを利用するとよい．
