= 学問への扉：計算機プログラミング入門

== Pyxelをつかったプログラミング
== 課題

自分のプログラムをつくる．「ゲームでなくてもよいが，pyxelは使うこと」
----->としていましたが，あくまで「原則」とします．

6/24, 7/1, 7/8, 7/22でプログラム作成．
8/5に5分程度で，パワーポイントをつかってプレゼンする．
そのためのパワーポイント資料作成は，7/22から8/5までに実施．

0から新しいプログラムをつくるのは難しいかもしれない．

既存のプログラムを改造することを考えると良いかもしれない．

== プログラム例その2 続き

隕石とミサイルとの当たり判定を追加．
あと，少しプログラムの書き方を整理．

.meteo4.py
[source,python]
----
import random
import pyxel

SCREEN_WIDTH = 200
SCREEN_HEIGHT = 255


class Meteo:
    def __init__(self):
        self.x = random.randint(0, SCREEN_WIDTH)
        self.y = -SCREEN_HEIGHT
        self.is_dead = False

    def update(self):
        if self.is_dead is False:
            self.y += 10
            if self.y > SCREEN_HEIGHT:
                self.is_dead = True


class Plane:
    def __init__(self):
        self.x = SCREEN_WIDTH/2
        self.y = SCREEN_HEIGHT * 0.8

    def update(self):
        if pyxel.btn(pyxel.KEY_LEFT):
            self.x = max(self.x - 4, 0)
        if pyxel.btn(pyxel.KEY_RIGHT):
            self.x = min(self.x + 4, pyxel.width)


class Missile:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.is_dead = False

    def update(self):
        self.y -= 16
        if self.y < 0:
            self.is_dead = True


is_running = False
meteos = []
plane = Plane()
missiles = []
MAX_MISSILES = 2


def update():
    global is_running
    global meteos
    global plane
    global missiles
    global MAX_MISSILES

    # Qで終了
    if pyxel.btnp(pyxel.KEY_Q):
        pyxel.quit()
    # SPACEキーでスタート前．スタートする前はreturn
    if is_running is False:
        if pyxel.btnp(pyxel.KEY_SPACE):
            is_running = True
            meteos = []
            plane = Plane()
        return

    # 飛行機動作
    plane.update()

    # 隕石発生
    if random.uniform(0, 1.0) < 0.2:
        meteos.append(Meteo())
    # 隕石動作
    for i in range(len(meteos)):
        meteos[i].update()

    # ミサイル発射
    if pyxel.btnp(pyxel.KEY_SPACE):
        if len(missiles) < MAX_MISSILES:
            missiles.append(Missile(plane.x, plane.y))
    # ミサイル動作
    for missile in missiles:
        missile.update()

    # 飛行機と隕石 当たり判定
    for met in meteos:
        if -10 < (met.y - plane.y) < 10:
            if -10 < (met.x - plane.x) < 10:
                is_running = False

    # ミサイルと隕石 当たり判定
    for met in meteos:
        for miss in missiles:
            if -10 < met.y - miss.y < 10:
                if -10 < met.x - miss.x < 10:
                    met.is_dead = True
                    miss.is_dead = True

    # 死んだ隕石をリストから削除
    for i in range(len(meteos)-1, -1, -1):
        if meteos[i].is_dead is True:
            del meteos[i]

    # 死んだミサイルをリストから削除
    for i in range(len(missiles)-1, -1, -1):
        if missiles[i].is_dead is True:
            del missiles[i]


def draw():
    global is_running
    global meteos
    global plane

    pyxel.cls(0)
    if is_running is False:
        pyxel.text(5, SCREEN_HEIGHT/2, "Press the Space Key!",
                   pyxel.frame_count % 16)
    for met in meteos:
        pyxel.circ(met.x, met.y, 5, 6)
    for missile in missiles:
        pyxel.circ(missile.x, missile.y, 5, 7)

    pyxel.circ(plane.x, plane.y, 5, 4)

pyxel.init(SCREEN_WIDTH, SCREEN_HEIGHT, caption="Shooting Star", scale=4)
pyxel.run(update, draw)
----

image::images/meteo.png[画面,400]

== プログラム例その3 ハングマン

キーボードから文字を入力するようなゲームをつくってみる．

まずは，入力の部分．aからzまでをうけつけ，バックスペースで1字削除．
エンターがおされたら，0から入力を始める．

.keyboard.py
[source,python]
----
import random
import pyxel

SCREEN_WIDTH = 200
SCREEN_HEIGHT = 100

KEYS_AZ = ((pyxel.KEY_A, 'a'), (pyxel.KEY_B, 'b'), (pyxel.KEY_C, 'c'),
           (pyxel.KEY_D, 'd'), (pyxel.KEY_E, 'e'), (pyxel.KEY_F, 'f'),
           (pyxel.KEY_G, 'g'), (pyxel.KEY_H, 'h'), (pyxel.KEY_I, 'i'),
           (pyxel.KEY_J, 'j'), (pyxel.KEY_K, 'k'), (pyxel.KEY_L, 'l'),
           (pyxel.KEY_M, 'm'), (pyxel.KEY_N, 'n'), (pyxel.KEY_O, 'o'),
           (pyxel.KEY_P, 'p'), (pyxel.KEY_Q, 'q'), (pyxel.KEY_R, 'r'),
           (pyxel.KEY_S, 's'), (pyxel.KEY_T, 't'), (pyxel.KEY_U, 'u'),
           (pyxel.KEY_V, 'v'), (pyxel.KEY_W, 'w'), (pyxel.KEY_X, 'x'),
           (pyxel.KEY_Y, 'y'), (pyxel.KEY_Z, 'z'))


def update():
    global input_str

    if pyxel.btnp(pyxel.KEY_ESCAPE):  # ESCで終了
        pyxel.quit()
    for pyxel_key, char in KEYS_AZ:  # A-Zの入力
        if pyxel.btnp(pyxel_key):
            input_str = input_str + char
            break
    else:
        if pyxel.btnp(pyxel.KEY_BACKSPACE):  # バックスペース
            input_str = input_str[:-1]
        elif pyxel.btnp(pyxel.KEY_ENTER):  # エンター
            input_str = ''


def draw():
    global input_str

    pyxel.cls(0)
    pyxel.text(10, SCREEN_HEIGHT/2, input_str, pyxel.frame_count % 16)


input_str = ''
pyxel.init(SCREEN_WIDTH, SCREEN_HEIGHT)
pyxel.run(update, draw)
----
image::images/keyboard.png[入力画面,400]

うえのプログラムを流用して，hangmanをpyxelで動くようにしてみる．
注意すべき点は，ゲームは0.1秒位の短い処理を繰り返し実行して動いているので，
プログラムではこの短い1回の動作の中ですることを記述しないといけないこと．

たとえば，文字が入力されるまで「待つ」ことはできないので，新しい入力が
なければ，その回は何もしないで終わらないといけない．
別の言い方をすると，`while` 文は `update()` や `draw()` の中では使えない．


.pyxelhangman.py
[source,python]
----
import random
import pyxel

KEYS_AZ = ((pyxel.KEY_A, 'a'), (pyxel.KEY_B, 'b'), (pyxel.KEY_C, 'c'),
           (pyxel.KEY_D, 'd'), (pyxel.KEY_E, 'e'), (pyxel.KEY_F, 'f'),
           (pyxel.KEY_G, 'g'), (pyxel.KEY_H, 'h'), (pyxel.KEY_I, 'i'),
           (pyxel.KEY_J, 'j'), (pyxel.KEY_K, 'k'), (pyxel.KEY_L, 'l'),
           (pyxel.KEY_M, 'm'), (pyxel.KEY_N, 'n'), (pyxel.KEY_O, 'o'),
           (pyxel.KEY_P, 'p'), (pyxel.KEY_Q, 'q'), (pyxel.KEY_R, 'r'),
           (pyxel.KEY_S, 's'), (pyxel.KEY_T, 't'), (pyxel.KEY_U, 'u'),
           (pyxel.KEY_V, 'v'), (pyxel.KEY_W, 'w'), (pyxel.KEY_X, 'x'),
           (pyxel.KEY_Y, 'y'), (pyxel.KEY_Z, 'z'))


def get_word():
    WORDS = "lion panda cheetah bear hippopotamus rhinoceros goat camel hyena \
            lama fox dingo bat sheep pig cow horse cat dog koala elephant \
            tiger mouse mole monkey".split()
    offset = random.randint(0, len(WORDS)-1)
    return WORDS[offset]


def unmask_word(word, letters):
    st = ""
    for c in word:
        for l in letters:
            if c == l:
                st = st + c
                break
        else:
            st = st + "_"
    return st


def update():
    global input_str
    global output
    global life
    global inputLetters
    global secret
    global state

    if pyxel.btnp(pyxel.KEY_ESCAPE):  # ESCで終了
        pyxel.quit()

    # 状態がゲーム中(1)以外
    if state != 1:
        if pyxel.btnp(pyxel.KEY_SPACE):  # SPACEで開始
            life = 5
            inputLetters = ''
            secret = get_word()
            output = unmask_word(secret, inputLetters)
            state = 1
        return

    # 状態がゲーム中(1)
    accepted_str = ''
    for pyxel_key, char in KEYS_AZ:  # A-Zの入力
        if pyxel.btnp(pyxel_key):
            input_str = input_str + char
            break
    else:
        if pyxel.btnp(pyxel.KEY_BACKSPACE):  # バックスペース
            input_str = input_str[:-1]
        elif pyxel.btnp(pyxel.KEY_ENTER):  # エンター
            accepted_str = input_str
            input_str = ''

    # 1字が正しく入力された場合の処理
    if len(accepted_str) == 1:
        inputLetters = inputLetters + accepted_str
        output_next = unmask_word(secret, inputLetters)
        if output_next == output:
            life = life - 1
            if life <= 0:  # 失敗
                state = 3
        output = output_next
        if output == secret:  # 成功
            state = 2


def draw():
    global input_str
    global output
    global life
    global inputLetters
    global state

    pyxel.cls(0)
    if state == 0:
        pyxel.text(10, 50, "Hit the space key to start", 15)
    elif state == 1:
        pyxel.text(10, 10, output, 10)
        pyxel.text(10, 20, "Life " + str(life), 8)
        pyxel.text(10, 30, "Letters tried: " + inputLetters, 7)
        pyxel.text(10, 50, ">" + input_str, pyxel.frame_count % 16)
    elif state == 2:
        pyxel.text(10, 10, output, 10)
        pyxel.text(10, 20, "Life " + str(life), 8)
        pyxel.text(10, 30, "Letters tried: " + inputLetters, 7)
        pyxel.text(10, 40, "Conglatulations!", pyxel.frame_count % 8)
        pyxel.text(10, 50, "Hit the space key to start", 15)
    else:
        pyxel.text(10, 10, output, 10)
        pyxel.text(10, 20, "Life " + str(life), 8)
        pyxel.text(10, 30, "Letters tried: " + inputLetters, 7)
        pyxel.text(10, 40, "Answer: " + secret, 7)
        pyxel.text(10, 50, "Hit the space key to start", 15)

# グローバル変数
input_str = ''
output = ''
life = 0
secret = ''
inputLetters = ''
state = 0  # 0:最初, 1:ゲーム中, 2:成功, 3:失敗

# ゲーム開始
pyxel.init(160, 80)
pyxel.run(update, draw)
----

image::images/hangman.png[ハングマン,400]

////
==== pyxeleditor

pyxeleditorを使えば，キャラクタの画像などを変更できる．
（注．大学の環境だと非常に遅い．）

たとえば，`02_jump_game.py` なら，`assets` の下の `jump_game.pyxel` にデータが入っている．
`assets` のフォルダに行って，トップレベルからのフォルダの場所が表示されている部分に，`powershell` と打ち込んだうえで，
`pyxeleditor jum_game.pyxel` を実行すれば，このファイルを編集できる．
////
