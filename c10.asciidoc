= 学問への扉：計算機プログラミング入門

== Pyxelをつかったプログラミング
== 課題

自分のプログラムをつくる．ゲームでなくてもよいが，pyxelは使うこと．

7週くらいを使って，作成．最後に5分程度で，パワーポイントをつかってプレゼンする．
そのためのパワーポイント資料作成に1週程度を見込むこと．

0から新しいプログラムをつくるのは難しいかもしれない．

既存のプログラムを改造することを考えると良いかもしれない．

== プログラム例その2 続き

隕石とミサイルとの当たり判定を追加．
あと，少しプログラムの書き方を整理．

.meteo4.py
[source,python]
----
import random
import pyxel

SCREEN_WIDTH = 200
SCREEN_HEIGHT = 255


class Meteo:
    def __init__(self):
        self.x = random.randint(0, SCREEN_WIDTH)
        self.y = -SCREEN_HEIGHT
        self.is_dead = False

    def update(self):
        if self.is_dead is False:
            self.y += 10
            if self.y > SCREEN_HEIGHT:
                self.is_dead = True


class Plane:
    def __init__(self):
        self.x = SCREEN_WIDTH/2
        self.y = SCREEN_HEIGHT * 0.8

    def update(self):
        if pyxel.btn(pyxel.KEY_LEFT):
            self.x = max(self.x - 4, 0)
        if pyxel.btn(pyxel.KEY_RIGHT):
            self.x = min(self.x + 4, pyxel.width)


class Missile:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.is_dead = False

    def update(self):
        self.y -= 16
        if self.y < 0:
            self.is_dead = True


is_running = False
meteos = []
plane = Plane()
missiles = []
MAX_MISSILES = 2


def update():
    global is_running
    global meteos
    global plane
    global missiles
    global MAX_MISSILES

    # Qで終了
    if pyxel.btnp(pyxel.KEY_Q):
        pyxel.quit()
    # SPACEキーでスタート前．スタートする前はreturn
    if is_running is False:
        if pyxel.btnp(pyxel.KEY_SPACE):
            is_running = True
            meteos = []
            plane = Plane()
        return

    # 飛行機動作
    plane.update()

    # 隕石発生
    if random.uniform(0, 1.0) < 0.2:
        meteos.append(Meteo())
    # 隕石動作
    for i in range(len(meteos)):
        meteos[i].update()

    # ミサイル発射
    if pyxel.btnp(pyxel.KEY_SPACE):
        if len(missiles) < MAX_MISSILES:
            missiles.append(Missile(plane.x, plane.y))
    # ミサイル動作
    for missile in missiles:
        missile.update()

    # 飛行機と隕石 当たり判定
    for met in meteos:
        if -10 < (met.y - plane.y) < 10:
            if -10 < (met.x - plane.x) < 10:
                is_running = False

    # ミサイルと隕石 当たり判定
    for met in meteos:
        for miss in missiles:
            if -10 < met.y - miss.y < 10:
                if -10 < met.x - miss.x < 10:
                    met.is_dead = True
                    miss.is_dead = True

    # 死んだ隕石をリストから削除
    for i in range(len(meteos)-1, -1, -1):
        if meteos[i].is_dead is True:
            del meteos[i]

    # 死んだミサイルをリストから削除
    for i in range(len(missiles)-1, -1, -1):
        if missiles[i].is_dead is True:
            del missiles[i]


def draw():
    global is_running
    global meteos
    global plane

    pyxel.cls(0)
    if is_running is False:
        pyxel.text(5, SCREEN_HEIGHT/2, "Press the Space Key!",
                   pyxel.frame_count % 16)
    for met in meteos:
        pyxel.circ(met.x, met.y, 5, 6)
    for missile in missiles:
        pyxel.circ(missile.x, missile.y, 5, 7)

    pyxel.circ(plane.x, plane.y, 5, 4)

pyxel.init(SCREEN_WIDTH, SCREEN_HEIGHT, caption="Shooting Star", scale=4)
pyxel.run(update, draw)
----


////
==== pyxeleditor

pyxeleditorを使えば，キャラクタの画像などを変更できる．
（注．大学の環境だと非常に遅い．）

たとえば，`02_jump_game.py` なら，`assets` の下の `jump_game.pyxel` にデータが入っている．
`assets` のフォルダに行って，トップレベルからのフォルダの場所が表示されている部分に，`powershell` と打ち込んだうえで，
`pyxeleditor jum_game.pyxel` を実行すれば，このファイルを編集できる．
////
